apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: http-filter
  # Deploy the filter to whatever istio considers its "root" namespace so that we
  # don't have to create the ConfigMap(s) containing the WASM filter binary,
  # and the associated annotations/configuration for the Istio sidecar(s).
  # https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig:~:text=No-,rootNamespace,-string
  namespace: istio-system
spec:
  #  workloadSelector:
  #    labels:
  #      # this can be almost any label, or even more than one label
  #      # if desired. Whatever value(s) are in this section though
  #      # must be present on any workload you'd like to observe
  #      sentryflow-visibility: "enabled"
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: envoy.filters.http.router
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.wasm
          typedConfig:
            '@type': type.googleapis.com/udpa.type.v1.TypedStruct
            typeUrl: type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
            value:
              config:
                name: http-filter
                rootId: http-filter
                configuration:
                  "@type": "type.googleapis.com/google.protobuf.StringValue"
                  value: |
                    {
                        "upstream_name": "filterserver",
                        "authority": "sentryflow",
                        "api_path": "/api/v1/events"
                    }
                vmConfig:
                  code:
                    remote:
                      http_uri:
                        uri: https://raw.githubusercontent.com/anurag-rajawat/envoy-wasm-filters/main/httpfilters.wasm
                        timeout: 5s
                        cluster: remote_wasm
                      sha256: 7ebcafc52d4b58a08bd48ce8d1eda25ea054ace136dd0ca2ce320278abbbee94
                  runtime: envoy.wasm.runtime.v8
                  vmId: http-filter
                  allow_precompiled: true
    - applyTo: CLUSTER
      match:
        context: SIDECAR_OUTBOUND
      patch:
        operation: ADD
        value:
          name: filterserver
          type: LOGICAL_DNS
          connect_timeout: 0.5s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: filterserver
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          protocol: TCP
                          address: "filterserver.sentryflow"
                          port_value: 80

    - applyTo: CLUSTER
      match:
        context: SIDECAR_OUTBOUND
      patch:
        operation: ADD
        value:
          name: remote_wasm
          type: STRICT_DNS
          connect_timeout: 1s
          dns_refresh_rate: 5s
          dns_lookup_family: V4_ONLY
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: remote_wasm
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: raw.githubusercontent.com
                          port_value: 443
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
              sni: "raw.githubusercontent.com"
